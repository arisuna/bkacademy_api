<?php
/**
 * Created by PhpStorm.
 * User: binhnt
 * Date: 12/12/14
 * Time: 2:04 PM
 */

namespace SMXD\App\Models;

use Phalcon\Http\Request;
use SMXD\Application\Models;
use Phalcon\Security;
use SMXD\Application\Validation\UserPasswordValidation;
use SMXD\Application\Lib\CacheHelper;

class UserLogin extends \SMXD\Application\Models\UserLoginExt
{
    /**
     * initialize UserLogin
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->hasOne('id', 'SMXD\App\Models\User', 'user_login_id', ['alias' => 'User']);
        $this->belongsTo('company_id', 'SMXD\App\Models\Company', 'id', ['alias' => 'Company']);
    }

    /*
    * create new user login from [email,password,app_id,user_group_id]
    */
    public function createNewUserLogin($data = array())
    {
        $model = new self();
        $userPasswordValidation = new UserPasswordValidation();

        if ( $userPasswordValidation->check( $data['password'] ) ) {
            $security = new Security();
            $model->setPassword($security->hash($data['password']));
        } else {
            $result = [
                'success' => false,
                'message' => $userPasswordValidation->getFirstMessage(),
                'detail' => $userPasswordValidation->getMessages(),
                'password' => $data['password'],
            ];
            return $result;
        }

        $model->setEmail($data['email']);
        $model->setStatus(self::STATUS_ACTIVATED);
        $model->setCreatedAt(date('Y-m-d H:i:s'));
        $model->setUserGroupId($data['user_group_id']);
        $model->setAppId($data['app_id']);
        try {
            if ($model->save()) {
                return $model;
            } else {
                $error_message = [];
                foreach ($model->getMessages() as $message) {
                    $error_message[$message->getField()] = $message->getMessage();
                }
                $result = [
                    'success' => false,
                    'message' => 'CREATE_USER_FAIL_TEXT',
                    'detail' => $error_message
                ];
            }
        } catch (\PDOException $e) {
            $result = [
                'success' => false,
                'message' => 'CREATE_USER_FAIL_TEXT',
                'detail' => $e->getMessage()
            ];
        }
        return $result;
    }

    /**
     * @param array $data
     * @return array|UserLogin
     */
    public static function __createNewUserLogin($data = array())
    {
        $model = new self();
        $userPasswordValidation = new UserPasswordValidation();

        if ( $userPasswordValidation->check( $data['password'] ) ) {
            $security = new Security();
            $model->setPassword($security->hash($data['password']));
        } else {
            $result = [
                'success' => false,
                'message' => $userPasswordValidation->getFirstMessage(),
                'detail' => $userPasswordValidation->getMessages(),
                'password' => $data['password'],
            ];
            return $result;
        }

        $model->setEmail($data['email']);
        $model->setStatus(self::STATUS_ACTIVATED);
        $model->setCreatedAt(date('Y-m-d H:i:s'));
        $model->setUserGroupId($data['user_group_id']);
        $model->setAppId($data['app_id']);
        try {
            if ($model->save()) {
                return $model;
            } else {
                $error_message = [];
                foreach ($model->getMessages() as $message) {
                    $error_message[$message->getField()] = $message->getMessage();
                }
                $result = [
                    'success' => false,
                    'message' => 'CREATE_USER_FAIL_TEXT',
                    'detail' => $error_message
                ];
            }
        } catch (\PDOException $e) {
            $result = [
                'success' => false,
                'message' => 'CREATE_USER_FAIL_TEXT',
                'detail' => $e->getMessage()
            ];
        }
        return $result;
    }

    /**
     * @param $email
     * @return bool
     */
    public static function ifEmailAvailable($email)
    {

        $user_login = self::findFirstByEmail($email);
        if ($user_login) {
            return false;
        } else {
            return true;
        }
    }

    /**
     *
     */
    public function beforeSave()
    {
        // Encode password
        $security = new Security();
        $req = new Request();
        if ($req->getPost('password') || $req->getPut('password'))
            $this->setPassword($security->hash($this->getPassword()));
    }

    /**
     *
     */
    public function loadListPermission()
    {
        $user = $this->getUser();
        $cacheManager = \Phalcon\DI\FactoryDefault::getDefault()->getShared('cache');
        $cacheName = CacheHelper::getAclCacheByGroupName($user->getUserGroupId());
//        $permissions = $cacheManager->get($cacheName, getenv('CACHE_TIME'));
        $permissions = [];
        $acl_list = [];
        //1. load from JWT

        if (!is_null($permissions) && is_array($permissions) && count($permissions) > 0) {
            return ($permissions);
        } else {
            $menus = array();
        }

        if(!$user->isAdmin()){
            $groups_acl = UserGroupAclExt::getAllPrivilegiesGroup($user->getUserGroupId());
            $acl_ids = [];
            if (count($groups_acl)) {
                foreach ($groups_acl as $item) {
                    $acl_ids[] = $item->getAclId();
                }
            }
            if (count($acl_ids) > 0) {
                // Get controller and action in list ACLs, order by level
                $acl_list = AclExt::find([
                    'conditions' => 'id IN ({acl_ids:array}) AND status = :status_active: ',
                    'bind' => [
                        'acl_ids' => $acl_ids,
                        'status_active' => AclExt::STATUS_ACTIVATED,
                    ],
                    'order' => 'pos, lvl ASC'
                ]);
            }
        } else {
            $acl_list = Acl::__findAdminAcls();
        }

        if (count($acl_list)) {
            $acl_list = $acl_list->toArray();
            foreach ($acl_list as $item) {
                if (!isset($permissions[$item['controller']])) {
                    $permissions[$item['controller']] = [];
                }
                $permissions[$item['controller']][] = $item['action'];
                if (!$item['status']) continue;
            }
        }

        $cacheManager->save($cacheName, $permissions, getenv('CACHE_TIME'));
        return ($permissions);
    }
}