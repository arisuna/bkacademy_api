<?php

namespace SMXD\App\Controllers\API;

use Phalcon\Acl;
use Phalcon\Exception;
use Phalcon\Http\Request;
use SMXD\Application\Aws\AwsCognito\AwsCognitoResult;
use SMXD\Application\Lib\AclHelper;
use SMXD\Application\Lib\Helpers;
use SMXD\Application\Lib\HttpStatusCode;
use SMXD\Application\Lib\JWTEncodedHelper;
use SMXD\Application\Models\ApplicationModel;
use SMXD\App\Controllers\ModuleApiController;
use SMXD\App\Models\ModuleModel;
use SMXD\App\Models\StaffUserGroup;
use Phalcon\Di;
use SMXD\Application\Aws\AwsCognito\CognitoClient;
use Aws\Exception\AwsException;

/**
 * Base class of App module API controller
 */
class BaseController extends ModuleApiController
{
    /**
     * @var language key of Controller
     */
    public $language_key;

    /**
     * before execute controller/action
     * @param \Phalcon\Mvc\Dispatcher $dispatcher
     * @throws \Exception
     */
    public function beforeExecuteRoute(\Phalcon\Mvc\Dispatcher $dispatcher)
    {
        $this->checkMaintenanceStatus();
        /** check prelight request of AWS */
        $this->checkPrelightRequest();
        /** check access request of AWS */
        $accessToken = ModuleModel::__getAccessToken();
        $refreshToken = ModuleModel::__getRefreshToken();
        if (Helpers::__isNull($accessToken)) {
            $return = [
                'success' => false,
                'message' => 'SESSION_NOT_FOUND_TEXT',
                'required' => 'login'
            ];
            $this->checkAuthMessage($return);
        }
        $return = ModuleModel::__checkAndRefreshAuthenByToken($accessToken, $refreshToken);
        if (!$return['success']) {
            $this->checkAuthMessage($return);
        }
        if ($return['success'] == true) {
            $this->response->setHeader('Token-Key', $return['accessToken']);
            $this->response->setHeader('Refresh-Token', $return['refreshToken']);
        }
    }

    /**
     *  after Execute Route
     */
    public function afterExecuteRoute(\Phalcon\Mvc\Dispatcher $dispatcher)
    {
        parent::afterExecuteRoute($dispatcher); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $controller
     * @param string $action
     * @return array
     * //TODO check permission use JWT in the future
     */
    public function canAccessResource($controller = '', $action = '')
    {
        // Check user in group
        if (!is_object(ModuleModel::$user) || empty(ModuleModel::$user) || !method_exists(ModuleModel::$user, 'getUserGroupId')) {
            return [
                'success' => false,
                'message' => 'TOKEN_EXPIRED_TEXT',
                'method' => __METHOD__,
            ];
        }
        $controller = $controller ? $controller : $this->router->getControllerName();
        $action = $action ? $action : $this->router->getActionName();
        AclHelper::__setUser(ModuleModel::$user);
        $result = AclHelper::__checkPermissionDetail($controller, $action);
        return $result;
    }

    /**
     * Check Ajax Method
     * @param $method
     */
    public function checkAjax($method)
    {
        $check = true;
        if (is_string($method)) {
            if ($method == '') $method = 'GET';
            if ($this->request->isAjax()) {
                if ($method == 'GET' && !$this->request->isGet()) {
                    $check = false;
                } elseif ($method == 'POST' && !$this->request->isPost()) {
                    $check = false;
                } elseif ($method == 'DELETE' && !$this->request->isDelete()) {
                    $check = false;
                } elseif ($method == 'PUT' && !$this->request->isPut()) {
                    $check = false;
                }
            } else {
                $check = false;
            }
        } elseif (is_array($method)) {
            if ($this->request->isAjax()) {
                if (!in_array($this->request->getMethod(), $method)) {
                    $check = false;
                }
            } else {
                $check = false;
            }
        } else {
            $check = false;
        }

        if ($check == false) {
            exit(json_encode([
                'success' => false,
                'message' => 'Restrict Access',
            ]));
        }
    }

    /**
     *
     */
    public function checkAjaxPut()
    {
        return $this->checkAjax('PUT');
    }

    /**
     *
     */
    public function checkAjaxPost()
    {
        return $this->checkAjax('POST');
    }

    /**
     *
     */
    public function checkAjaxPutPost()
    {
        return $this->checkAjax(['POST', 'PUT']);
    }

    public function checkAjaxPutGet()
    {
        return $this->checkAjax(['PUT', 'GET']);
    }

    /**
     *
     */
    public function checkAjaxDelete()
    {
        return $this->checkAjax('DELETE');
    }

    /**
     *
     */
    public function checkAjaxGet()
    {
        return $this->checkAjax('GET');
    }

    /**
     * @param $action
     */
    public function checkAcl($action, $controller_name = '')
    {
        if ($controller_name == '') {
            $controller_name = $this->router->getControllerName();
        }

        if (is_string($action)) {
            $access = $this->canAccessResource($controller_name, $action);
            if (!$access['success']) {
                return $this->returnNotAllowedMessage($access);
            } // --------------
            if (!$access['success']) {
                $access['controller'] = $controller_name;
                $access['action'] = $action;
                exit(json_encode($access));
            } // --------------
        } elseif (is_array($action) && count($action) > 0) {
            foreach ($action as $actionItemValue) {
                if (is_string($actionItemValue)) {
                    $access = $this->canAccessResource($controller_name, $actionItemValue);
                    if (!$access['success']) {
                        return $this->returnNotAllowedMessage($access);
                    }
                    if (!$access['success']) {
                        $access['controller'] = $controller_name;
                        $access['action'] = $action;
                        exit(json_encode($access));
                    }// --------------
                }
            }
        }
    }

    /**
     * if one permission in group validated
     * @param array $actionArray
     */
    public function checkAclMultiple($actionArray = [])
    {
        if (count($actionArray) == 0) return ['success' => true];

        foreach ($actionArray as $key => $actionItemValue) {
            if (is_array($actionItemValue)) {
                if (isset($actionItemValue['controller']) && isset($actionItemValue['action'])) {
                    $access = $this->canAccessResource($actionItemValue['controller'], $actionItemValue['action']);
                    if ($access['success']) {
                        return $access;
                    }
                }
            }
        }

        return $this->returnNotAllowedMessage();
    }


    /**
     *
     */
    public function checkPermissionCreateEdit($controllername = '')
    {
        if ($controllername == '') $controllername = $this->dispatcher->getControllerName();
        $actionArray = [
            ['controller' => $controllername, 'action' => AclHelper::ACTION_CREATE],
            ['controller' => $controllername, 'action' => AclHelper::ACTION_EDIT],
        ];
        $access = $this->checkAclMultiple($actionArray);
        if (!$access['success']) {
            return $this->returnNotAllowedMessage();
            exit(json_encode($access));
        }
    }

    /**
     * if one permission in group failed
     * @param array $actionArray
     */
    public function checkAclSimul($actionArray = [])
    {
        foreach ($actionArray as $actionItemValue) {
            if (is_array($actionItemValue)) {
                $access = $this->canAccessResource($actionItemValue['controller'], $actionItemValue['action']);
                if (!$access['success']) {
                    return $this->returnNotAllowedMessage();
                    return $access;
                }// --------------
            }
        }
        return ['success' => true];
    }

    /**
     * @param string $controller_name
     */
    public function checkAclDelete($controller_name = '')
    {
        return $this->checkAcl('delete', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclEdit($controller_name = '')
    {
        return $this->checkAcl('edit', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclIndex($controller_name = '')
    {
        return $this->checkAcl('index', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclUpdate($controller_name = '')
    {
        return $this->checkAcl('update', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclView($controller_name = '')
    {
        return $this->checkAcl('view', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclCreate($controller_name = '')
    {
        return $this->checkAcl('create', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclChangeStatus($controller_name = '')
    {
        return $this->checkAcl('change_status', $controller_name);

    }

    /**
     * @param string $controller_name
     */
    public function checkAclDownload($controller_name = '')
    {
        return $this->checkAcl('download', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclUpload($controller_name = '')
    {
        return $this->checkAcl('upload', $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclReset($controller_name = '')
    {
        return $this->checkAcl(AclHelper::ACTION_RESET, $controller_name);
    }

    /**
     * @param string $controller_name
     */
    public function checkAclDeleteOwn($controller_name = '')
    {
        return $this->checkAcl('delete_own', $controller_name);
    }

    /**
     * @param $action
     * @param $controller
     * @param $uuid
     */
    public function checkAclByUuid($object_uuid, $action, $controller = "")
    {
        if ($controller == "") {
            $controller = AclHelper::__getControllerByUuid($object_uuid);
        }
        return $this->checkAcl($action, $controller);
    }

    /**
     * @param string $controllerName
     * @return array
     */
    public function checkAclCreateAndEdit($controllerName = '')
    {
        if ($controllerName == '') $controllerName = $this->dispatcher->getControllerName();
        return $this->checkAclMultiple([
            ['controller' => $controllerName, 'action' => AclHelper::ACTION_CREATE],
            ['controller' => $controllerName, 'action' => AclHelper::ACTION_EDIT],
        ]);
    }


    /**
     * @param string $controller_name
     */
    public function checkAclManage($controller_name = '')
    {
        return $this->checkAcl('manage', $controller_name);
    }


    /**
     * @param $hrCompany
     */
    public function checkPermissionContract($hrCompany)
    {
        if ($hrCompany->isEditable() == false) {
            $this->response->setJsonContent([
                'success' => false,
                'message' => 'YOU_DO_NOT_HAVE_PERMISSION_ACCESSED_IN_CONTRACT_TEXT',
            ]);
            $this->response->send();
            exit();
        }
    }

    /**
     * @param $assignment
     */
    public function checkPermissionEditAssignment($assignment)
    {
        $hrCompany = $assignment->getCompany();
        if ($hrCompany->isEditable() == false) {
            $activeContract = ModuleModel::$company->getActiveContract($hrCompany->getId());
            if ($activeContract && $activeContract->hasPermission('assignment', 'edit') == false) {
                $this->response->setJsonContent([
                    'success' => false,
                    'message' => 'YOU_DO_NOT_HAVE_PERMISSION_ACCESSED_IN_CONTRACT_TEXT',
                ]);
                $this->response->send();
                exit();
            }
        }
    }

    /**
     * @param $assignment
     */
    public function checkPermissionCreateAssignment($hrCompany)
    {
        if ($hrCompany->isEditable() == false) {
            $activeContract = ModuleModel::$company->getActiveContract($hrCompany->getId());
            if ($activeContract && $activeContract->hasPermission('assignment', 'create') == false) {
                $this->response->setJsonContent([
                    'success' => false,
                    'message' => 'HR_DID_NOT_GIVE_PERMISSION_TEXT',
                ]);
                $this->response->send();
                exit();
            }
        }
    }

    /**
     * @param null $accessResult
     */
    public function returnNotAllowedMessage($accessResult = null)
    {
        $this->response->setStatusCode(HttpStatusCode::HTTP_FORBIDDEN);
        if ($accessResult == null) {
            $accessResult = ['success' => false, 'message' => 'METHOD_NOT_ALLOWED_TEXT'];
        }
        $this->response->setJsonContent($accessResult);
        $this->response->send();
        exit();
    }

    /**
     * @param null $accessResult
     */
    public function returnNotAllowOnly($accessResult = null)
    {
        if ($accessResult == null) {
            $accessResult = ['success' => false, 'message' => 'METHOD_NOT_ALLOWED_TEXT'];
        }
        $this->response->setStatusCode(HttpStatusCode::HTTP_FORBIDDEN);
        $this->response->setJsonContent($accessResult);
        $this->response->send();
        exit();
    }

    /**
     *
     */
    public function checkMaintenanceStatus()
    {
        if (getenv('APP_MAINTENANCE') === true || getenv('APP_MAINTENANCE') == 'true') {
            $this->view->disable();
            $this->response->setJsonContent(['success' => false, 'message' => 'MAINTENANCE_IN_PROGRESS_TEXT']);
            $this->response->send();
            exit();
        }
    }

    /**
     * check password , use only if request need password
     */
    public function checkPasswordBeforeExecute()
    {

        $password = '';
        if (Helpers::__existRequestValue('password')) {
            $password = Helpers::__getRequestValue('password');
        } else if (Helpers::__existHeaderValue('password')) {
            $password = Helpers::__getHeaderValue('password');
        }

        $checkPassword = ModuleModel::__loginUserCognitoByEmail(ModuleModel::$user->getEmail(), $password);
        if ($checkPassword['success'] == false) {
            $return = $checkPassword;
            $return['message'] = 'PASSWORD_INCORRECT_TEXT';
            $this->view->disable();
            $this->response->setJsonContent($return);
            $this->response->send();
            exit();
        }
    }
}
