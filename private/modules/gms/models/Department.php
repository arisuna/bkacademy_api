<?php
/**
 * Created by PhpStorm.
 * User: binhnt
 * Date: 12/12/14
 * Time: 2:04 PM
 */

namespace Reloday\Gms\Models;

use Phalcon\Paginator\Adapter\QueryBuilder as PaginatorQueryBuilder;
use Reloday\Application\Lib\Helpers;
use Reloday\Gms\Models\Contract;

class Department extends \Reloday\Application\Models\DepartmentExt
{
    const MAX_LIMIT_PER_PAGE = 1000;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->belongsTo('company_id', 'Reloday\Gms\Models\Company', 'id', [
            'alias' => 'Company',
            'reusable' => true,
        ]);
        $this->belongsTo('office_id', 'Reloday\Gms\Models\Office', 'id', [
            'alias' => 'Office',
            'reusable' => true,
        ]);

        $this->belongsTo('head_employee_id', 'Reloday\Gms\Models\Employee', 'id', [
            'alias' => 'HeadEmployee',
            'reusable' => true,
        ]);
    }

    /**
     * @param $search_value
     * @return array
     */
    public function loadList($search_value = '')
    {
        return [
            'success' => true,
            'message' => self::__findWithFilter()
        ];
    }

    /**
     * check is belong to GMS
     * @return [type] [description]
     */
    public function belongsToGms()
    {
        $company = ModuleModel::$company;
        if ($company) {
            $contract = Contract::findFirst([
                "conditions" => "from_company_id = :from_company_id: AND to_company_id = :to_company_id: AND status = :status:",
                "bind" => [
                    "from_company_id" => $this->getCompanyId(),
                    "to_company_id" => $company->getId(),
                    "status" => Contract::STATUS_ACTIVATED,
                ]
            ]);
            if ($contract) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    /**
     * @param string $name_search
     * @return array
     */
    public static function __findWithFilterSimple($options = [])
    {

        $queryBuilder = new \Phalcon\Mvc\Model\Query\Builder();
        $queryBuilder->addFrom('\Reloday\Gms\Models\Department', 'Department');
//        $queryBuilder->columns([
//            'uuid' => 'Department.uuid',
//            'id' => 'Department.id',
//            'Department.status',
//            'code' => 'Department.code',
//            'name' => 'Department.name',
//            'hr_company_id' => 'Department.company_id',
//            'company_name' => 'Company.name',
//            'office_name' => 'Office.name',
//        ]);
        $bind = array();
        $queryBuilder->distinct(true);
        $queryBuilder->innerjoin('\Reloday\Gms\Models\Company', 'Company.id = Department.company_id', 'Company');
        $queryBuilder->leftjoin('\Reloday\Gms\Models\Office', 'Office.id = Department.office_id', 'Office');
        $queryBuilder->innerjoin('\Reloday\Gms\Models\Contract', 'Contract.from_company_id = Department.company_id', 'Contract');

        $queryBuilder->where("Contract.to_company_id = :gms_company_id:", [
            'gms_company_id' => ModuleModel::$company->getId()
        ]);
//        $queryBuilder->andwhere("Department.status = :status_activated:", [
//            'status_activated' => self::STATUS_ACTIVATED
//        ]);

        if (isset($options['statuses']) && is_array($options['statuses']) && count($options['statuses']) > 0) {
            $queryBuilder->andWhere("Department.status IN ({statuses:array})", ["statuses" => $options['statuses']]);
//            $bindArray['statuses'] = $options['statuses'];
        }

        $bind['status_activated'] = self::STATUS_ACTIVATED;
        $bind['gms_company_id'] = ModuleModel::$company->getId();

        if (isset($options['company_id']) && Helpers::__isValidId($options['company_id']) && $options['company_id'] > 0) {
            $queryBuilder->andwhere("Department.company_id = :hr_company_id:", [
                'hr_company_id' => $options['company_id']
            ]);
            $bind['hr_company_id'] = $options['company_id'];
        }

        if (isset($options['query']) && is_string($options['query']) && $options['query'] != '') {
            $queryBuilder->andwhere("Department.name LIKE :query:", [
                'query' => '%' . $options['query'] . '%'
            ]);
            $bind['query'] = '%' . $options['query'] . '%';
        }

        if(isset($options['company_ids']) && is_array($options['company_ids']) && count($options['company_ids']) > 0){
            $queryBuilder->andwhere('Department.company_id IN ({company_ids:array})', [
                'company_ids' => $options['company_ids']
            ]);

            $bind['company_ids'] =  $options['company_ids'];
        }

        $limit = isset($options['limit']) && is_numeric($options['limit']) && $options['limit'] > 0 ? $options['limit'] : self::MAX_LIMIT_PER_PAGE;
        if (!isset($options['page'])) {
            $start = isset($options['start']) && is_numeric($options['start']) && $options['start'] > 0 ? $options['start'] : 0;
            $page = intval($start / $limit) + 1;
        } else {
            $page = isset($options['page']) && is_numeric($options['page']) && $options['page'] > 0 ? $options['page'] : 1;
        }

        $queryBuilder->orderBy('Department.created_at DESC');

        try {
            $paginator = new PaginatorQueryBuilder([
                "builder" => $queryBuilder,
                "limit" => $limit,
                "page" => $page,
            ]);
            $pagination = $paginator->getPaginate();

            $items = [];

            if ($pagination->items->count() > 0) {
                foreach ($pagination->items as $item) {
                    $arr = $item->toArray();
                    $arr['id'] = intval($arr['id']);
                    $arr['hr_company_id'] = intval($arr['company_id']);
                    $arr['company_name'] = $item->getCompany() ? $item->getCompany()->getName() : '';
                    $arr['office_name'] = $item->getOffice() ? $item->getOffice()->getName() : '';
                    $arr['status'] = intval($arr['status']);
                    $items[] = $arr;
                }
            }

            return [
                'success' => true,
                'page' => $page,
                'data' => $items,
                'before' => $pagination->before,
                'next' => $pagination->next,
                'last' => $pagination->last,
                'current' => $pagination->current,
                'total_items' => $pagination->total_items,
                'total_pages' => $pagination->total_pages,
                'total_rest_items' => $pagination->total_items - $limit * $pagination->current,
            ];

        } catch (\Phalcon\Exception $e) {
            \Sentry\captureException($e);
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        } catch (\PDOException $e) {
            \Sentry\captureException($e);
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        } catch (Exception $e) {
            \Sentry\captureException($e);
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        }

    }
}