<?php
/**
 * Created by PhpStorm.
 * User: binhnt
 * Date: 12/12/14
 * Time: 2:04 PM
 */

namespace Reloday\Gms\Models;

use Phalcon\Http\Request;
use Phalcon\Security\Random;
use Phalcon\Security;
use Reloday\Application\Lib\CacheHelper;
use Reloday\Application\Lib\Helpers;

class Contract extends \Reloday\Application\Models\ContractExt
{
    /**
     * initialize
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->hasManyToMany('id', 'Reloday\Gms\Models\ContractPermission', 'contract_id', 'contract_permission_item_id', 'Reloday\Gms\Models\ContractPermissionItem', 'id', [
            'alias' => 'Permissions',
            'reusable' => true,
        ]);
        $this->hasMany('id', 'Reloday\Gms\Models\ContractPermission', 'contract_id', [
            'alias' => 'ContractPermissions'
        ]);
    }

    /**
     * Create new contract
     * @param  array $params [description]
     * @return [type]         [description]
     */
    public static function __create($params = [])
    {

        $model = new self();

        $from_company_id = isset($params['from_company']) ? $params['from_company'] : null;
        $to_company_id = isset($params['to_company']) ? $params['to_company'] : null;
        $contract_name = isset($params['contract_name']) ? $params['contract_name'] : null;
        $status = isset($params['status']) ? $params['status'] : self::STATUS_ACTIVATED;

        if (!is_null($from_company_id) && !is_null($to_company_id) && !is_null($contract_name)) {
            $random = new Random();
            $security = new Security();
            $model->setUuid($random->uuid());
            $model->setHash($security->hash($contract_name));
            $model->setName($contract_name);
            $model->setToCompanyId($to_company_id);
            $model->setFromCompanyId($from_company_id);
            $model->setCreatedAt(date('Y-m-d H:i:s'));
            $model->setCreatedAt(date('Y-m-d H:i:s'));
            $model->setStatus($status);

            if ($model->save()) {
                return $model;
            } else {
                $msg = [];
                foreach ($model->getMessages() as $message) {
                    $msg[$message->getField()] = $message->getMessage();
                }
                $result = [
                    'success' => false,
                    'message' => 'SAVE_COMPANY_FAIL',
                    'detail' => $msg
                ];
                return $result;
            }
        }
    }

    /**
     * get all contract of current gms
     * @return [type] [description]
     */
    public static function __getAllOfCurrentGMS()
    {
        // 1. Load user profile
        $user_profile = ModuleModel::$user_profile;

        if ($user_profile instanceof UserProfile) {

            // 3. Load list company in contract
            $contracts = self::find([
                'conditions' => 'to_company_id = :to_company_id: AND status = :status:',
                'bind' => [
                    'to_company_id' => $user_profile->getCompanyId(),
                    'status' => Contract::STATUS_ACTIVATED
                ]
            ]);

            if (count($contracts)) {
                return ['success' => true, 'data' => $contracts];
            } else {
                return ['success' => false, 'data' => []];
            }
        } else {
            return ['success' => false, 'data' => []];
        }
    }

    /**
     *
     */
    public static function __findContractOfCompany($company_id)
    {
        $contract = self::findFirst([
            "conditions" => "from_company_id = :from_company_id: AND to_company_id = :to_company_id:",
            "bind" => [
                "from_company_id" => $company_id,
                "to_company_id" => ModuleModel::$company->getId(),
            ]
        ]);
        if ($contract) return $contract;
    }

    /**
     * check if a company exist in contract GMS company
     * @param $company_id
     */
    public static function ifCompanyExistInContracts($hrCompanyId)
    {
        $gms_current = ModuleModel::$company;
        if ($gms_current) {
            $nb_contract = self::count([
                "conditions" => "from_company_id = :from_company_id: AND to_company_id = :to_company_id: AND status = :status:",
                "bind" => [
                    "from_company_id" => $hrCompanyId,
                    "to_company_id" => $gms_current->getId(),
                    "status" => Contract::STATUS_ACTIVATED
                ],
                "cache" => [
                    'lifetime' => CacheHelper::__TIME_5_MINUTES,
                    'key' => '_CHECK_CONTRACT_'. $hrCompanyId . '_'. $gms_current->getId()
                ]
            ]);
            if ($nb_contract >= 1) return true;
            else return false;
        }
        return false;
    }

    /**
     * @return mixed
     */
    public function getPermissionsList()
    {
        return $this->getPermissions();
    }

    /**
     * @param String $controller
     * @param String $action
     */
    public function hasPermission(String $controller, String $action)
    {
        $permissions = $this->getPermissions();
        if ($permissions->count() > 0) {
            foreach ($permissions as $permission) {
                if ($permission->getController() == $controller && $permission->getAction() == $action) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * @param int $contractId
     * @param String $controller
     * @param String $action
     * @return bool
     */
    public static function __hasPermissionFromContractId(int $contractId, String $controller, String $action)
    {
        $check = ContractPermission::findFirst([
            'conditions' => 'contract_id = :contract_id: AND controller = :controller: AND action = :action:',
            'bind' => [
                'contract_id' => $contractId,
                'controller' => $controller,
                'action' => $action,
            ],
            'cache' => [
                'key' => "__CACHE_CONTRACT_PERMISSION_" . $contractId . "_" . $controller . "_" . $action . "__",
                'lifetime' => CacheHelper::__TIME_1_MINUTE,
            ]
        ]);
        
        if ($check) {
            return true;
        } else {
            return false;
        }
    }
}