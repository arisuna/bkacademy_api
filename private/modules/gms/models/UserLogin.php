<?php


namespace Reloday\Gms\Models;

use Phalcon\Acl;
use Phalcon\Acl\Adapter\Memory;
use Phalcon\Http\Client\Provider\Exception;
use Phalcon\Http\Request;
use Phalcon\Security;

use Phalcon\Validation;
use Phalcon\Validation\Validator\Email as EmailValidator;
use Phalcon\Validation\Validator\PresenceOf as PresenceOfValidator;
use Phalcon\Validation\Validator\Uniqueness as UniquenessValidator;
use Phalcon\Validation\Validator\Regex as RegexValidator;

use Reloday\Application\Models\SubscriptionAclExt;
use Reloday\Application\Models\SubscriptionExt;
use Reloday\Application\Validation\UserPasswordValidation;
use Reloday\Gms\Models\UserGroupAcl;
use Reloday\Gms\Models\UserGroup;
use Reloday\Gms\Models\Acl as UserAcl;
use Reloday\Gms\Models\UserGroupAclCompany;
use Reloday\Gms\Models\ModuleModel;
use Reloday\Gms\Models\UserLoginToken;
use Reloday\Application\Lib\CacheHelper;
use Reloday\Application\Lib\Helpers as Helpers;


class UserLogin extends \Reloday\Application\Models\UserLoginExt
{
    /**
     * initialize UserLogin
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->belongsTo('app_id', 'Reloday\Gms\Models\App', 'id', ['alias' => 'App']);
        $this->hasOne('id', 'Reloday\Gms\Models\Employee', 'user_login_id', ['alias' => 'Employee']);
        $this->hasOne('id', 'Reloday\Gms\Models\UserProfile', 'user_login_id', ['alias' => 'UserProfile']);
        $this->belongsTo('company_id', 'Reloday\Gms\Models\Company', 'id', ['alias' => 'Company']);
    }

    /**
     * @return array
     */
    public function loadListMenu()
    {
        if ($this->getUserGroupId() != UserGroup::GMS_ADMIN) {
            if ($this->getApp()->getCompany()) {
                $groups_acl = UserGroupAclCompany::getAllPriviligiesGroupCompany($this->getUserGroupId(), $this->getApp()->getCompany()->getId());
                if (count($groups_acl) == 0) {
                    $groups_acl = UserGroupAcl::getAllPrivilegiesGroup($this->getUserGroupId());
                }

                $acl_ids = [];
                if (count($groups_acl)) {
                    foreach ($groups_acl as $item) {
                        $acl_ids[] = $item->getAclId();
                    }
                }
                $acl_list = UserAcl::find([
                    'conditions' => 'id IN ({acl_ids:array}) and is_gms = :is_gms:',
                    'bind' => [
                        'acl_ids' => $acl_ids,
                        'is_gms' => UserAcl::IS_GMS_YES
                    ],
                    'cache' => [
                        'key' => CacheHelper::getAclListGroupCacheName($this->getUserGroupId()),
                        'lifetime' => 3600,
                    ],
                    'order' => 'pos, lvl ASC'
                ]);
            } else {
                return [
                    'success' => false,
                    'cache_time' => getenv('CACHE_TIME'),
                    'message' => 'COMPANY_NOT_FOUND_TEXT',
                    'data' => [],
                    'acl' => [],
                ];
            }
        } else {
            $acl_list = UserAcl::find([
                'conditions' => 'is_gms = :is_gms:',
                'bind' => [
                    'is_gms' => UserAcl::IS_GMS_YES
                ],
                'cache' => [
                    'key' => CacheHelper::getAclListGroupCacheName($this->getUserGroupId()),
                    'lifetime' => 3600,
                ],
                'order' => 'pos, lvl ASC'
            ]);
        }
        $menus = [];
        if (count($acl_list)) {
            $acl_list = $acl_list->toArray();
            foreach ($acl_list as $item) {
                if (!isset($list_permission[$item['controller']])) {
                    $list_permission[$item['controller']] = [];
                }
                $list_permission[$item['controller']][] = $item['action'];
                // Create json data, check if enable in the menu
                if (!$item['status']) continue;

                if ($item['lvl'] == 1) {
                    $menus[$item['id']]['translate'] = $item['label'];
                    $menus[$item['id']]['text'] = $item['label'];
                    $menus[$item['id']]['sref'] = $item['angular_state'];
                    $menus[$item['id']]['icon'] = $item['main_class'];
                    $menus[$item['id']]['alert'] = 0;
                    $menus[$item['id']]['label'] = $item['info_class'];
                    $menus[$item['id']]['order'] = $item['pos'];
                    $menus[$item['id']]['visible'] = intval($item['status']) == 1 ? true : false;
                }
            }

            foreach ($acl_list as $item) {
                if (!$item['status']) continue;
                if ($item['lvl'] == 2 && isset($menus[$item['acl_id']])) {
                    $tmp = [];
                    $tmp['translate'] = $item['label'];
                    $tmp['id'] = $item['id'];
                    $tmp['module'] = $item['name'];
                    $tmp['text'] = $item['label'];
                    $tmp['controller'] = $item['controller'];
                    $tmp['action'] = $item['action'];
                    $tmp['visible'] = $item['status'];
                    $tmp['sref'] = $item['angular_state'];
                    $tmp['alert'] = 0;
                    $tmp['order'] = $item['pos'];
                    foreach ($acl_list as $itemChild) {
                        if ($itemChild['lvl'] == 3 && $itemChild['acl_id'] == $tmp['id'] && $itemChild['status'] == 1) {
                            $tmp['submenu'][$itemChild['id']] = [
                                'id' => $itemChild['id'],
                                'module' => $itemChild['name'],
                                'text' => $itemChild['label'],
                                'translate' => $itemChild['label'],
                                'controller' => $itemChild['controller'],
                                'action' => $itemChild['action'],
                                'visible' => $itemChild['status'],
                                'sref' => $itemChild['angular_state'],
                                'order' => $itemChild['pos']
                            ];
                        }
                    }
                    if (isset($tmp['submenu']) && is_array($tmp['submenu'])) {
                        usort($tmp['submenu'], '\Reloday\Application\Lib\Helpers::sort_menu');
                    }
                    $menus[$item['acl_id']]['submenu'][$item['id']] = $tmp;
                }
                if (isset($menus[$item['acl_id']]['submenu']) && is_array($menus[$item['acl_id']]['submenu'])) {
                    usort($menus[$item['acl_id']]['submenu'], '\Reloday\Application\Lib\Helpers::sort_menu');
                }
            }
        }

        return array_values($menus);

        /*
        $cacheManager = $this->getDi()->getShared('cache');
        $cacheName = CacheHelper::getMenuCacheName($this->getAppId(), $this->getUserGroupId());
        if ($cacheManager->exists($cacheName)) {
            $menus = $cacheManager->get($cacheName);
        } else {
            $menus = [];
            $cacheManager->save($cacheName, $menus, getenv('CACHE_TIME'));
        }
        return array_values($menus);
        */
    }

    /**
     *
     */
    public function loadListPermission()
    {
        $cacheManager = \Phalcon\DI\FactoryDefault::getDefault()->getShared('cache');
        $cacheName = CacheHelper::getAclCacheByCompanyGroupName($this->getUserProfile()->getCompanyId(), $this->getUserProfile()->getUserGroupId());
//        $permissions = $cacheManager->get($cacheName, getenv('CACHE_TIME'));
        $permissions = [];
        $acl_list = [];
        //1. load from JWT

        if (!is_null($permissions) && is_array($permissions) && count($permissions) > 0) {
            return ($permissions);
        } else {
            $menus = array();
        }

        $subscription = SubscriptionExt::findFirstByCompanyId($this->getUserProfile()->getCompanyId());
        if(!$subscription instanceof SubscriptionExt || ($subscription->getStatus()!= SubscriptionExt::STATUS_TRIAL && $subscription->getStatus()!= SubscriptionExt::STATUS_ACTIVE && $subscription->getStatus()!= SubscriptionExt::STATUS_NONRENEWING)) {
            if ($this->getUserProfile()->getUserGroupId() != UserGroup::GMS_ADMIN) {
                return $permissions;
            } else {
                $permissions = [
                    "admin" => ["index"],
                    "subscription" => ["index"]
                ];
                $cacheManager->save($cacheName, $permissions, getenv('CACHE_TIME'));
                return $permissions;
            }
        }
        $acl_list = $subscription->__loadListPermission($this->getUserProfile());

        if (count($acl_list)) {
            $acl_list = $acl_list->toArray();
            foreach ($acl_list as $item) {
                if (!isset($permissions[$item['controller']])) {
                    $permissions[$item['controller']] = [];
                }
                $permissions[$item['controller']][] = $item['action'];
                if (!$item['status']) continue;
            }
        }

        $cacheManager->save($cacheName, $permissions, getenv('CACHE_TIME'));
        return ($permissions);
    }


    /**
     * @param string $token
     * @param string $controller
     * @param string $action
     * @return array
     */
    public function checkPermission($controller = '', $action = '')
    {
        $hasPermission = false;
        $list_permission = $this->loadListPermission();


        if ($list_permission != null && is_array($list_permission) && count($list_permission) > 0) {
            if (!isset($list_permission[$controller]) || !isset($list_permission[$controller][$action])) {
                $hasPermission = false;
            } else {
                if (isset($list_permission[$controller]) && isset($list_permission[$controller][$action])) {
                    $hasPermission = true;
                }
            }
            foreach ($list_permission as $key_controller => $v_action_list) {
                if ($controller == $key_controller) {
                    if (is_array($v_action_list)) {
                        foreach ($v_action_list as $act) {
                            if ($act == $action) {
                                $hasPermission = true;
                            }
                        }
                    }
                    break;
                }
            }
            return [
                'success' => $hasPermission,
                'aclDetails' => $controller."/".$action,
                'message' => $hasPermission ? 'YOU_HAVE_PERMISSION_ACCESSED_TEXT' : 'YOU_DO_NOT_HAVE_PERMISSION_ACCESSED_TEXT'
            ];
        } else {
            return [
                'success' => false,
                'aclDetails' => $controller."/".$action,
                'message' => 'YOU_DO_NOT_HAVE_PERMISSION_ACCESSED_TEXT'
            ];
        }
    }

    /**
     * @param array $params
     * @return array|UserLogin|UserLoginExt
     */
    public function __save($params = [])
    {
        $req = new Request();
        $model = $this;
        $data = $req->getPost();
        if ($model->getId() == null || $model->getId() == 0) {
            if ($req->isPut()) {
                // Request update //Put = update
                $user_login_id = isset($params['user_login_id']) && $params['user_login_id'] > 0 ? $params['user_login_id'] : ($req->getPut('user_login_id'));
                $model = $this->findFirstById($user_login_id);
                if (!$model instanceof $this) {
                    return [
                        'success' => false,
                        'message' => 'USER_LOGIN_NOT_FOUND_TEXT'
                    ];
                }
            }
        }
        if ($req->isPut()) {
            $data = $req->getPut();
        }
        $model->setEmail(isset($params['login']) ? $params['login'] : (isset($data['login']) ? $data['login'] : $model->getEmail()));

        //*******************************SET PASSWORD IF NECESSARY***************************
        $pwd = isset($params['password']) ? $params['password'] : (isset($data['password']) ? $data['password'] : '');
        $security = new Security();
        if ($req->isPut()) {
            // update set new password
            if (!empty($pwd)) {
                $validationPassword = new UserPasswordValidation();
                if ($validationPassword->check($pwd) == false) {
                    $result = [
                        'success' => false,
                        'message' => 'PASSWORD_INVALID_TEXT',
                    ];
                    return $result;
                } else {
                    $model->setPassword($security->hash($pwd));
                }
            }
        } else {
            $validationPassword = new UserPasswordValidation();
            if ($validationPassword->check($pwd) == false) {
                $result = [
                    'success' => false,
                    'message' => 'PASSWORD_INVALID_TEXT',
                ];
                return $result;
            } else {
                $model->setPassword($security->hash($pwd));
            }
        }
        //*******************************END OF SET PASSWORD IF NECESSARY***************************

        /* setup userGroupId */
        $userGroupId = Helpers::getIntPositive($params, 'user_group_id') ? Helpers::getIntPositive($params, 'user_group_id') :
            (Helpers::getIntPositive($data, 'user_group_id') ? Helpers::getIntPositive($data, 'user_group_id') : (
            Helpers::getIntPositive($params, 'group_id') ? Helpers::getIntPositive($params, 'group_id') : (
            Helpers::getIntPositive($data, 'group_id') ? Helpers::getIntPositive($data, 'group_id') : $model->getUserGroupId())));

        if (is_array($userGroupId) && count($userGroupId) > 0) {
            $userGroupId = $userGroupId['value'];
        }
        if ($userGroupId > 0 && $model->getUserGroupId() != $userGroupId) {
            $model->setUserGroupId($userGroupId);
        }
        $model->setAppId(isset($params['app_id']) ? $params['app_id'] : (isset($data['app_id']) ? $data['app_id'] : $model->getAppId()));
        $model->setStatus(isset($params['status']) ? (int)$params['status'] : (isset($data['status']) ? (int)$data['status'] : $model->getStatus()));

        if ($model->save()) {
            return $model;
        } else {
            $msg = [];
            foreach ($model->getMessages() as $message) {
                $msg[$message->getField()] = $message->getMessage();
            }
            $result = [
                'success' => false,
                'message' => 'SAVE_USER_LOGIN_FAIL_TEXT',
                'detail' => $msg
            ];
            return $result;
        }
    }


    /**
     * { user_login_email, user_login_password, user_group_id, app_id, status }
     * @param array $params
     * @return array|UserLogin|UserLoginExt
     */
    public function updateUserLogin($data = [])
    {
        $model = $this;
        $model->setEmail(isset($data['email']) ? $data['email'] : (isset($data['user_login_email']) ? $data['user_login_email'] : $model->getEmail()));
        $pwd = isset($data['password']) ? $data['password'] : (isset($data['user_login_password']) ? $data['user_login_password'] : '');
        if ($pwd != '') {
            $security = new Security();
            $model->setPassword($security->hash($pwd));
        }
        /* setup userGroupId */
        $userGroupId = Helpers::getIntPositive($data, 'user_group_id') ? Helpers::getIntPositive($data, 'user_group_id') :
            (Helpers::getIntPositive($data, 'user_group_id') ? Helpers::getIntPositive($data, 'user_group_id') : (
            Helpers::getIntPositive($data, 'group_id') ? Helpers::getIntPositive($data, 'group_id') : (
            Helpers::getIntPositive($data, 'group_id') ? Helpers::getIntPositive($data, 'group_id') : $model->getUserGroupId())));

        if (is_array($userGroupId) && count($userGroupId) > 0) {
            $userGroupId = $userGroupId['value'];
        }
        if ($userGroupId > 0 && $model->getUserGroupId() != $userGroupId) {
            $model->setUserGroupId($userGroupId);
        }
        $model->setAppId(isset($data['app_id']) ? $data['app_id'] : (isset($data['app_id']) ? $data['app_id'] : $model->getAppId()));
        $model->setStatus(isset($data['status']) ? (int)$data['status'] : (isset($data['status']) ? (int)$data['status'] : $model->getStatus()));
        if ($this->getId() > 0) {
            return $model->__quickUpdate();
        } else {
            return ['success' => true, 'message' => ''];
        }
    }


    /**
     * @param array $custom
     */
    public function createNewUserLogin($data = [])
    {
        $model = $this;
        $model->setEmail(isset($data['email']) ? $data['email'] : (isset($data['user_login_email']) ? $data['user_login_email'] : $model->getEmail()));
        $pwd = isset($data['password']) ? $data['password'] : (isset($data['user_login_password']) ? $data['user_login_password'] : '');
        if ($pwd != '') {
            $security = new Security();
            $model->setPassword($security->hash($pwd));
        }
        /* setup userGroupId */
        $userGroupId = Helpers::getIntPositive($data, 'user_group_id') ? Helpers::getIntPositive($data, 'user_group_id') :
            (Helpers::getIntPositive($data, 'user_group_id') ? Helpers::getIntPositive($data, 'user_group_id') : (
            Helpers::getIntPositive($data, 'group_id') ? Helpers::getIntPositive($data, 'group_id') : (
            Helpers::getIntPositive($data, 'group_id') ? Helpers::getIntPositive($data, 'group_id') : $model->getUserGroupId())));

        if (is_array($userGroupId) && count($userGroupId) > 0) {
            $userGroupId = $userGroupId['value'];
        }
        if ($userGroupId > 0 && $model->getUserGroupId() != $userGroupId) {
            $model->setUserGroupId($userGroupId);
        }
        $model->setAppId(isset($data['app_id']) ? $data['app_id'] : (isset($data['app_id']) ? $data['app_id'] : $model->getAppId()));
        $model->setStatus(isset($data['status']) ? (int)$data['status'] : (isset($data['status']) ? (int)$data['status'] : $model->getStatus()));
        return $model->__quickCreate();
    }

    /**
     *
     */
    public function managedByGMS()
    {
        //if user profile
        $user_profile = $this->getUserProfile();
        if ($user_profile) {
            if ($user_profile->getCompanyId() == ModuleModel::$company->getId()) {
                return true;
            } else {
                //if is USER IN CONTRACT
                $company = $user_profile->getCompany();
                if ($company && $company->managedByGMS()) {
                    return true;
                } else {
                    return false;
                }
            }
        } else {
            $employee = $this->getEmployee();
            if ($employee && $employee->belongsToGms()) {
                return true;
            } else {
                return false;
            }
        }
        //if employees
    }

    /**
     * @return bool
     */
    public function isEmployee()
    {
        if ($this->getEmployee()) return true;
        else return false;
    }

    /**
     *
     */
    public function getListPrivilegies($token_key, $list_permission)
    {
        // 4. Save ACL data to cache
        $privileges = new Memory();
        // Define roles, resources, access, etc
        $privileges->addRole($token_key);
        $privileges->setDefaultAction(Acl::DENY);
        foreach ($list_permission as $resource_name => $v) {
            $resource = new Acl\Resource($resource_name);
            // Add action to resource
            foreach ($v as $action) {
                $privileges->addResource($resource, $action);
                $privileges->allow($token_key, $resource_name, $action);
            }
        }
    }

    /**
     * @param $password
     * @return mixed
     */
    public function checkPasswordAction($password)
    {
        $check = $this->getDi()->getShared('security')->checkHash($password, $this->getPassword());
        if ($check == true)
            return ['success' => true];
        else
            return ['success' => false, "message" => "PASSWORD_INCORRECT_TEXT"];
    }

    /**
     * { user_login_email, user_login_password, user_group_id, app_id, status }
     * @param array $params
     * @return array|UserLogin|UserLoginExt
     */
    public function __save_infos($params = [])
    {

        $req = new Request();
        $model = $this;

        $data = $req->getJsonRawBody(true);

        if (!isset($data['user_login_email'])) {
            if ($req->isPut()) {
                $data = $req->getPut();
            } elseif ($req->isPost()) {
                $data = $req->getPut();
            }
        }

        if ($model->getId() == null || $model->getId() == 0) {
            if ($req->isPut()) {
                if ($model->getId() > 0) {
                    //User Login Model Loaded
                } else {
                    $user_login_id = isset($params['user_login_id']) && $params['user_login_id'] > 0 ? $params['user_login_id'] : ($req->getPut('user_login_id'));
                    $model = $this->findFirstById($user_login_id);
                    if (!$model instanceof $this) {
                        return [
                            'success' => false,
                            'message' => 'USER_LOGIN_NOT_FOUND_TEXT'
                        ];
                    }
                }
            }
        }

        $model->setEmail(isset($params['user_login_email']) ? $params['user_login_email'] : (isset($data['user_login_email']) ? $data['user_login_email'] : $model->getEmail()));
        $pwd = isset($params['user_login_password']) ? $params['user_login_password'] : (isset($data['user_login_password']) ? $data['user_login_password'] : '');

        $security = new Security();
        if ($req->isPut()) {
            if (!empty($pwd)) {
                $model->setPassword($security->hash($pwd)); //HASH PASSWORD
            }
        } else {
            $model->setPassword($security->hash($pwd));
        }

        /* setup userGroupId */
        $userGroupId = Helpers::getIntPositive($params, 'user_group_id') ? Helpers::getIntPositive($params, 'user_group_id') :
            (Helpers::getIntPositive($data, 'user_group_id') ? Helpers::getIntPositive($data, 'user_group_id') : (
            Helpers::getIntPositive($params, 'group_id') ? Helpers::getIntPositive($params, 'group_id') : (
            Helpers::getIntPositive($data, 'group_id') ? Helpers::getIntPositive($data, 'group_id') : $model->getUserGroupId())));

        if (is_array($userGroupId) && count($userGroupId) > 0) {
            $userGroupId = $userGroupId['value'];
        }
        if ($userGroupId > 0 && $model->getUserGroupId() != $userGroupId) {
            $model->setUserGroupId($userGroupId);
        }
        $model->setAppId(isset($params['app_id']) ? $params['app_id'] : (isset($data['app_id']) ? $data['app_id'] : $model->getAppId()));
        $model->setStatus(isset($params['status']) ? (int)$params['status'] : (isset($data['status']) ? (int)$data['status'] : $model->getStatus()));


        try {
            if ($model->save()) {
                return $model;
            } else {
                $msg = [];
                foreach ($model->getMessages() as $message) {
                    $msg[$message->getField()] = $message->getMessage();
                }
                $result = [
                    'success' => false,
                    'message' => 'SAVE_USER_LOGIN_FAIL_TEXT',
                    'detail' => $msg
                ];
                return $result;
            }
        } catch (\PDOException $e) {
            $result = [
                'success' => false,
                'message' => 'SAVE_USER_LOGIN_FAIL_TEXT',
                'detail' => $e->getMessage()
            ];
            return $result;
        } catch (Exception $e) {
            $result = [
                'success' => false,
                'message' => 'SAVE_USER_LOGIN_FAIL_TEXT',
                'detail' => $e->getMessage()
            ];
            return $result;
        }
    }
}
