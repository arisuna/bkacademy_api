<?php
/**
 * Created by PhpStorm.
 * User: binhnt
 * Date: 12/12/14
 * Time: 2:04 PM
 */

namespace Reloday\Gms\Models;

class NeedAssessmentsRelocation extends \Reloday\Application\Models\NeedAssessmentsRelocationExt
{
    /**
     *
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->belongsTo('relocation_id', '\Reloday\Gms\Models\Relocation', 'id', ['alias' => 'Relocation']);
        $this->belongsTo('need_assessment_root_id', '\Reloday\Gms\Models\NeedAssessments', 'id', ['alias' => 'NeedAssessments']);
        $this->belongsTo('service_id', '\Reloday\Gms\Models\RelocationServiceCompany', 'id', ['alias' => 'RelocationServiceCompany']);
        $this->belongsTo('company_id', '\Reloday\Gms\Models\Company', 'id', ['alias' => 'Company']);

    }

    /**
     * @param $relocation_id
     * @param $service_id
     * @param $status
     * @return \Reloday\Application\Models\NeedAssessmentsRelocation|\Reloday\Application\Models\NeedAssessmentsRelocation[]
     */
    public static function getListByRelocationService( $relocation_id, $service_id, $status ){

        /** check need assessment of relocation and service*/

        if( $status == self::STATUS_NOT_SENT ) {
            $conditions = 'service_id = :service_id: AND relocation_id = :relocation_id: AND status  >= :status:';
        }elseif( in_array( $status, [
            NeedAssessmentsRelocation::STATUS_NOT_SENT,
            NeedAssessmentsRelocation::STATUS_SENT,
            NeedAssessmentsRelocation::STATUS_ANSWERED,
            NeedAssessmentsRelocation::STATUS_READ
        ])){
            $conditions = 'service_id = :service_id: AND relocation_id = :relocation_id: AND status  = :status:';
        }

        return self::find([
            'conditions' => $conditions,
            'bind' => [
                'service_id' => $service_id,
                'relocation_id' => $relocation_id,
                'status' => $status
            ]
        ]);
    }

    /**
     * @param $relocation_id
     * @param $service_id
     * @param $status
     * @return \Reloday\Application\Models\NeedAssessmentsRelocation|\Reloday\Application\Models\NeedAssessmentsRelocation[]
     */
    public static function countByRelocationService( $relocation_id, $service_id, $status ){

        /** check need assessment of relocation and service*/

        if( $status == self::STATUS_NOT_SENT ) {
            $conditions = 'service_id = :service_id: AND relocation_id = :relocation_id: AND status  >= :status:';
        }elseif( in_array( $status, [
            NeedAssessmentsRelocation::STATUS_NOT_SENT,
            NeedAssessmentsRelocation::STATUS_SENT,
            NeedAssessmentsRelocation::STATUS_ANSWERED,
            NeedAssessmentsRelocation::STATUS_READ
        ])){
            $conditions = 'service_id = :service_id: AND relocation_id = :relocation_id: AND status  = :status:';
        }

        return self::count([
            'conditions' => $conditions,
            'bind' => [
                'service_id' => $service_id,
                'relocation_id' => $relocation_id,
                'status' => $status
            ]
        ]);
    }

}