<?php

namespace Reloday\Gms\Models;

use Phalcon\Http\Request;
use Phalcon\Mvc\Model\Behavior\SoftDelete;
use Phalcon\Security\Random;
use PhpParser\Node\Expr\AssignOp\Mod;
use Reloday\Gms\Models\ModuleModel;
use Reloday\Application\Lib\Helpers;

class CompanyNotificationSetting extends \Reloday\Application\Models\CompanyNotificationSettingExt
{
    /**
     *
     */
    public function initialize()
    {
        parent::initialize();
        $this->belongsTo('notification_id', 'Reloday\Gms\Models\Notification', 'id', ['alias' => 'Notification']);
    }

    /**
     * @param $notificationId
     */
    public static function __findByNotificationId($notificationId)
    {
        $notifSetting = self::findFirst([
            'conditions' => 'company_id = :company_id:  AND notification_id = :notification_id:',
            'bind' => [
                'company_id' => ModuleModel::$company->getId(),
                'notification_id' => $notificationId
            ]
        ]);
        return $notifSetting;
    }

    /**
     * @param $notificationId
     */
    public static function __createFromNotification($notification)
    {
        $notifSetting = new self();
        $notifSetting->setData([
            'notification_id' => $notification->getId(),
            'company_id' => ModuleModel::$company->getId(),
            'is_reporter' => Helpers::YES,
            'is_creator' => Helpers::NO,
            'is_owner' => Helpers::YES,
            'is_viewer' => Helpers::YES,
            'is_current_user' => Helpers::YES
        ]);
        if($notification->getNotificationGroup()->getEntityName() == NotificationGroup::EMPLOYEE_GROUP){
            $notifSetting->setIsCurrentUser(Helpers::NO);
        };
        return $notifSetting->__quickCreate();
    }

    /**
     * @return \Phalcon\Mvc\Model\ResultSetInterface|\Reloday\Application\Models\CompanyNotificationSetting|\Reloday\Application\Models\CompanyNotificationSetting[]
     */
    public static function __getCurrentList()
    {
        $queryBuilder = new \Phalcon\Mvc\Model\Query\Builder();
        $queryBuilder->addFrom('\Reloday\Gms\Models\CompanyNotificationSetting', 'CompanyNotificationSetting');
        $queryBuilder->distinct(true);
        $queryBuilder->innerjoin('\Reloday\Gms\Models\Notification', 'Notification.id = CompanyNotificationSetting.notification_id', 'Notification');
        $queryBuilder->where('CompanyNotificationSetting.company_id = :company_id:', [
            'company_id' => ModuleModel::$company->getId()
        ]);
        $queryBuilder->andWhere('Notification.is_gms = 1');
        return $queryBuilder->getQuery()->execute();
    }

    /**
     * @return bool
     */
    public function belongsToGms(){
        return $this->getCompanyId() == ModuleModel::$company->getId();
    }

    /**
     * @param null $columns
     * @return mixed|void
     */
    public function toArray($columns = NULL)
    {
        $array = parent::toArray($columns); // TODO: Change the autogenerated stub
        $array['label'] = $this->getNotification()->getLabel();
        $array['notification_group_id'] = $this->getNotification()->getNotificationGroupId();
        return $array;
    }
}
