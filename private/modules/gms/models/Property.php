<?php
/**
 * Created by PhpStorm.
 * User: binhnt
 * Date: 12/12/14
 * Time: 2:04 PM
 */

namespace Reloday\Gms\Models;

use Phalcon\Mvc\Model\Relation;
use Reloday\Application\Lib\Helpers;
use Reloday\Application\Lib\ModelHelper;
use Reloday\Application\Validator\CurrencyValidator;

use Phalcon\Paginator\Adapter\Model as PaginatorModel;
use Phalcon\Paginator\Adapter\NativeArray as PaginatorArray;
use Phalcon\Paginator\Adapter\QueryBuilder as PaginatorQueryBuilder;
use Phalcon\Paginator\Factory;

class Property extends \Reloday\Application\Models\PropertyExt
{

    const LIMIT_PER_PAGE = 20;

    /**
     *
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->belongsTo('country_id', 'Reloday\Gms\Models\Country', 'id', [
            'alias' => 'Country'
        ]);
        $this->belongsTo('agent_svp_id', 'Reloday\Gms\Models\ServiceProviderCompany', 'id', [
            'alias' => 'Agent'
        ]);

        $this->belongsTo('landlord_svp_id', 'Reloday\Gms\Models\ServiceProviderCompany', 'id', [
            'alias' => 'Landlord'
        ]);

        $this->hasMany('id', 'Reloday\Gms\Models\HousingPropostion', 'property_id', [
            "alias" => 'HousingPropostion',
            "foreignKey" => [
                "action" => Relation::ACTION_CASCADE,
            ]
        ]);

        $this->hasOne('id', 'Reloday\Gms\Models\PropertyData', 'property_id', [
            'alias' => 'PropertyData'
        ]);
    }

    /**
     * @return array
     */
    public function getAttachments()
    {
        $attachments = MediaAttachment::__get_attachments_from_uuid($this->getUuid());
        return $attachments;
    }

    /**
     * @return array
     */
    public function getMainThumbUrl()
    {
        $file = MediaAttachment::__getMainThumb($this->getUuid());
        if (empty($file)) {
            $file = MediaAttachment::__getFirstImage($this->getUuid());
        }

        if (!empty($file)) {
            return $file['image_data']['url_thumb'];
        } else {
            return false;
        }
    }

    /**
     * @return bool
     */
    public function belongsToGms()
    {
        return ModuleModel::$company->getId() == $this->getCompanyId();
    }

    /**
     * @return bool
     */
    public function isDeleted()
    {
        return $this->getStatus() == self::STATUS_DELETED;
    }

    /**
     * @param bool $full_info
     * @param $options
     * @param array $order
     * @return array
     */
    public static function __findWithFilter($options, $orders = [])
    {
        $di = \Phalcon\DI::getDefault();
        $queryBuilder = new \Phalcon\Mvc\Model\Query\Builder();
        $queryBuilder->addFrom('\Reloday\Gms\Models\Property', 'Property');
        $queryBuilder->distinct(true);

        $queryBuilder->innerJoin('\Reloday\Gms\Models\Country', 'Country.id = Property.country_id', 'Country');
        $queryBuilder->leftJoin('\Reloday\Gms\Models\AttributesValue', "AttributePropertyType.id = (SUBSTRING_INDEX(Property.type, '_', -1))", 'AttributePropertyType');
        $queryBuilder->leftJoin('\Reloday\Gms\Models\AttributesValueTranslation', "TranslationPropertyType.attributes_value_id = AttributePropertyType.id AND TranslationPropertyType.language = '" . ModuleModel::$language . "'", 'TranslationPropertyType');
        $queryBuilder->leftJoin('\Reloday\Gms\Models\ServiceProviderCompany', "Landlord.id = Property.landlord_svp_id", 'Landlord');

        $queryBuilder->where('Property.company_id = :company_id:', [
            'company_id' => ModuleModel::$company->getId()
        ]);
        $queryBuilder->andwhere("Property.status <> :status_archived:", [
            'status_archived' => self::STATUS_DELETED
        ]);


        if (isset($options['is_selected']) && is_bool($options['is_selected']) && $options['is_selected'] == false) {
            $selectedIds = HousingProposition::__findSelectedPropertyIds();
            if (count($selectedIds) > 0) {
                $queryBuilder->notInWhere('Property.id', $selectedIds);
            }
        }


        if (isset($options['type']) && $options['type'] != '') {
            $queryBuilder->andwhere("Property.type = :type:", ["type" => $options['type']]);
        }

        if (isset($options['is_building']) && ($options['is_building'] == 0 || $options['is_building'] == 1)) {
            $queryBuilder->andwhere("Property.is_building = :is_building:", ["is_building" => $options['is_building']]);
        }

        if (isset($options['is_furnished']) && is_numeric($options['is_furnished']) && ($options['is_furnished'] == 0 || $options['is_furnished'] == 1)) {
            $queryBuilder->andwhere("Property.furnished = :is_furnished:", ["is_furnished" => $options['is_furnished']]);
        }

        if (isset($options['have_car_port']) && is_numeric($options['have_car_port']) && ($options['have_car_port'] == 0 || $options['have_car_port'] == 1)) {
            $queryBuilder->andwhere("Property.car_port = :car_port:", ["car_port" => $options['have_car_port']]);
        }

        if (isset($options['is_pet_accepted']) && is_numeric($options['is_pet_accepted']) && ($options['is_pet_accepted'] == 0 || $options['is_pet_accepted'] == 1)) {
            $queryBuilder->andwhere("Property.pets = :is_pet_accepted:", ["is_pet_accepted" => $options['is_pet_accepted']]);
        }

        if (isset($options['have_swimming_pool']) && is_numeric($options['have_swimming_pool']) && ($options['have_swimming_pool'] == 0 || $options['have_swimming_pool'] == 1)) {
            $queryBuilder->andwhere("Property.swimming_pool = :have_swimming_pool:", ["have_swimming_pool" => $options['have_swimming_pool']]);
        }


        if (isset($options['query']) && is_string($options['query']) && $options['query'] != '') {
            $queryBuilder->andwhere("Property.name LIKE :query: OR Property.number LIKE :query: OR 
            Country.name LIKE :query: OR Property.town LIKE :query: OR Property.rent_currency LIKE :query: OR 
            Property.rent_amount LIKE :query: OR  TranslationPropertyType.value LIKE :query: OR Landlord.name LIKE :query:",
                ['query' => '%' . $options['query'] . '%']);
        }

        if (isset($options['agent_svp_id']) && Helpers::__checkId($options['agent_svp_id'])) {
            $queryBuilder->andwhere("Property.agent_svp_id = :agent_svp_id:", [
                'agent_svp_id' => $options['agent_svp_id'],
            ]);
        }

        if (isset($options['landlord_svp_id']) && Helpers::__checkId($options['landlord_svp_id'])) {
            $queryBuilder->andwhere("Property.landlord_svp_id = :landlord_svp_id:", [
                'landlord_svp_id' => $options['landlord_svp_id'],
            ]);
        }

        if (isset($options['country_id']) && Helpers::__checkId($options['country_id'])) {
            $queryBuilder->andwhere("Property.country_id = :country_id:", [
                'country_id' => $options['country_id'],
            ]);
        }

        if (isset($options['city']) && is_string($options['city']) && $options['city'] != '') {
            $queryBuilder->andwhere("Property.town LIKE :city:", ['city' => '%' . $options['city'] . '%']);
        }

        if (isset($options['address']) && is_string($options['address']) && $options['address'] != '') {
            $queryBuilder->andwhere("Property.address1 LIKE :address: OR Property.address2 LIKE :address:", ['address' => '%' . $options['address'] . '%']);
        }

        if (isset($options['zipcode']) && is_string($options['zipcode']) && $options['zipcode'] != '') {
            $queryBuilder->andwhere("Property.zipcode LIKE :zipcode: ", ['zipcode' => '%' . $options['zipcode'] . '%']);
        }

        if (isset($options['property_name']) && is_string($options['property_name']) && $options['property_name'] != '') {
            $queryBuilder->andwhere("Property.name LIKE :property_name: ", ['property_name' => '%' . $options['property_name'] . '%']);
        }

        if (isset($options['plot']) && is_string($options['plot']) && $options['plot'] != '') {
            $queryBuilder->andwhere("Property.plot LIKE :plot: ", ['plot' => '%' . $options['plot'] . '%']);
        }

        if (isset($options['size']) && is_numeric($options['size'])) {
            $queryBuilder->andwhere("Property.size = :size:", ['size' => $options['size']]);
        }

        if (isset($options['size_unit']) && is_numeric($options['size_unit'])) {
            $queryBuilder->andwhere("Property.size_unit = :size_unit:", ['size_unit' => $options['size_unit']]);
        }

        if (isset($options['furnished_status']) && is_numeric($options['furnished_status'])) {
            $queryBuilder->andwhere("Property.furnished_status = :furnished_status:", ['furnished_status' => $options['furnished_status']]);
        }

        if (isset($options['is_available']) && is_numeric($options['is_available'])) {
            $queryBuilder->andwhere("Property.is_available = :is_available:", ['is_available' => $options['is_available']]);
        }

        if (isset($options['rent_currency']) && Helpers::__isCurrency($options['rent_currency'])) {
            $queryBuilder->andwhere("Property.rent_currency = :rent_currency:", ['rent_currency' => $options['rent_currency']]);
        }

        if (isset($options['rent_amount_min']) && is_numeric($options['rent_amount_min'])) {
            $queryBuilder->andwhere("Property.rent_amount >= :rent_amount_min:", ['rent_amount_min' => $options['rent_amount_min']]);
        }

        if (isset($options['rent_amount_max']) && is_numeric($options['rent_amount_max'])) {
            $queryBuilder->andwhere("Property.rent_amount <= :rent_amount_max:", ['rent_amount_max' => $options['rent_amount_max']]);
        }

        if (isset($options['rent_period']) && is_string($options['rent_period'])) {
            $queryBuilder->andwhere("Property.rent_period <= :rent_period:", ['rent_period' => $options['rent_period']]);
        }

        if (isset($options['environment']) && is_string($options['environment'])) {
            $queryBuilder->andwhere("Property.environment = :environment:", ['environment' => $options['environment']]);
        }

        if (isset($options['currency_codes']) && is_array($options['currency_codes']) && count($options['currency_codes']) > 0) {
            $queryBuilder->andwhere("Property.rent_currency IN ({currency_codes:array})", [
                'currency_codes' => $options['currency_codes'],
            ]);
        }
        if (isset($options['nb_bathrooms']) && is_numeric($options['nb_bathrooms']) && $options['nb_bathrooms'] > 0) {
            $queryBuilder->andwhere("Property.nb_bathrooms = :nb_bathrooms:", ['nb_bathrooms' => $options['nb_bathrooms']]);
        }

        if (isset($options['nb_bedrooms']) && is_numeric($options['nb_bedrooms']) && $options['nb_bedrooms'] > 0) {
            $queryBuilder->andwhere("Property.nb_bedrooms = :nb_bedrooms:", ['nb_bedrooms' => $options['nb_bedrooms']]);
        }

        if (isset($options['country_ids']) && is_array($options['country_ids']) && count($options['country_ids']) > 0) {
            $queryBuilder->andwhere("Property.country_id IN ({country_ids:array})", [
                'country_ids' => $options['country_ids'],
            ]);
        }

        if (isset($options['type_codes']) && is_array($options['type_codes']) && count($options['type_codes']) > 0) {
            $queryBuilder->andwhere("Property.is_building IN ({type_codes:array})", [
                'type_codes' => $options['type_codes'],
            ]);
        }

        if (isset($options['availability_codes']) && is_array($options['availability_codes']) && count($options['availability_codes']) > 0) {
            $queryBuilder->andwhere("Property.is_available IN ({availability_codes:array})", [
                'availability_codes' => $options['availability_codes'],
            ]);
        }

        if (isset($options['property_type_codes']) && is_array($options['property_type_codes']) && count($options['property_type_codes']) > 0) {
            $queryBuilder->andwhere("Property.type IN ({property_type_codes:array})", [
                'property_type_codes' => $options['property_type_codes'],
            ]);
        }

        if (isset($options['furnished_codes']) && is_array($options['furnished_codes']) && count($options['furnished_codes']) > 0) {
            $queryBuilder->andwhere("Property.furnished_status IN ({furnished_codes:array})", [
                'furnished_codes' => $options['furnished_codes'],
            ]);
        }

        if (isset($options['landlord_ids']) && is_array($options['landlord_ids']) && count($options['landlord_ids']) > 0) {
            $queryBuilder->andwhere("Property.landlord_svp_id IN ({landlord_ids:array})", [
                'landlord_ids' => $options['landlord_ids'],
            ]);
        }


        $limit = isset($options['limit']) && is_numeric($options['limit']) && $options['limit'] > 0 ? $options['limit'] : (
        isset($options['length']) && is_numeric($options['length']) && $options['length'] > 0 ? $options['length'] : self::LIMIT_PER_PAGE);

        if (!isset($options['page'])) {
            $start = isset($options['start']) && is_numeric($options['start']) && $options['start'] > 0 ? $options['start'] : 0;
            $page = intval($start / $limit) + 1;
        } else {
            $start = 0;
            $page = isset($options['page']) && is_numeric($options['page']) && $options['page'] > 0 ? $options['page'] : 1;
        }

        if (count($orders)) {
            $order = reset($orders);
            if ($order['field'] == "created_at") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Property.created_at ASC']);
                } else {
                    $queryBuilder->orderBy(['Property.created_at DESC']);
                }
            }
            if ($order['field'] == "updated_at") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Property.updated_at ASC']);
                } else {
                    $queryBuilder->orderBy(['Property.updated_at DESC']);
                }
            }

            if ($order['field'] == "name") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Property.name ASC']);
                } else {
                    $queryBuilder->orderBy(['Property.name DESC']);
                }
            }

            if ($order['field'] == "rent_amount") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Property.rent_amount ASC']);
                } else {
                    $queryBuilder->orderBy(['Property.rent_amount DESC']);
                }
            }

            if ($order['field'] == "") {
                $queryBuilder->orderBy(['Property.created_at DESC']);

            }
        } else {
            $queryBuilder->orderBy("Property.created_at DESC");
        }

        try {
            $paginator = new PaginatorQueryBuilder([
                "builder" => $queryBuilder,
                "limit" => $limit,
                "page" => $page,
            ]);
            $pagination = $paginator->getPaginate();

            $propertyArray = [];
            if ($pagination->items->count() > 0) {
                foreach ($pagination->items as $item) {
                    $propertyArray[$item->getUuid()] = $item->toArray();
                    $propertyArray[$item->getUuid()]['agent_svp'] = $item->getAgent() ? $item->getAgent()->getName() : '';
                    $propertyArray[$item->getUuid()]['landlord_svp'] = $item->getLandlord() ? $item->getLandlord()->getName() : '';
                    $propertyArray[$item->getUuid()]['country'] = $item->getCountry() ? $item->getCountry()->getName() : '';
                    $propertyArray[$item->getUuid()]['country_name'] = $item->getCountry() ? $item->getCountry()->getName() : '';
                    $propertyArray[$item->getUuid()]['country_iso'] = $item->getCountry() ? $item->getCountry()->getCio() : '';
                    $propertyArray[$item->getUuid()]['description'] = Helpers::limit_text($item->getSummary(), 100);
                    $propertyArray[$item->getUuid()]['is_building'] = $item->getIsBuilding() == Property::IS_BUILDING ? true : false;
                    $propertyArray[$item->getUuid()]['rent_amount'] = $item->getRentAmount();
                    $propertyArray[$item->getUuid()]['rent_period'] = $item->getRentPeriod();
                    $propertyArray[$item->getUuid()]['image_count'] = MediaAttachment::__countAttachments($item->getUuid());

                    $file = MediaAttachment::__getMainThumb($item->getUuid());
                    if (empty($file)) {
                        $file = MediaAttachment::__getFirstImage($item->getUuid());
                    }
                    if (!empty($file)) {
                        $propertyArray[$item->getUuid()]['image'] = $file['image_data']['url_thumb'];
                    } else {
                        $propertyArray[$item->getUuid()]['image'] = false;
                    }
                }
            }

            return [
                'success' => true,
                'sql' => $queryBuilder->getQuery()->getSql(),
                'page' => $page,
                'data' => array_values($propertyArray),
                'before' => $pagination->before,
                'next' => $pagination->next,
                'last' => $pagination->last,
                'current' => $pagination->current,
                'total_items' => $pagination->total_items,
                'total_pages' => $pagination->total_pages,
                'params' => $options,
                'orders' => $orders,
            ];

        } catch (\Phalcon\Exception $e) {
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        } catch (\PDOException $e) {
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        } catch (Exception $e) {
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        }
    }

    /**
     * @return mixed
     */
    public function getSummaryData()
    {
        $data = $this->toArray();
        $data['country_name'] = $this->getCountry() ? $this->getCountry()->getName() : null;
        $landlord = $this->getLandlord();
        $data['landlord_name'] = $landlord ? $landlord->getName() : null;
        $data['landlord_phone_number'] = $landlord ? $landlord->getPhone() : null;
        $data['landlord_email'] = $landlord ? $landlord->getEmail() : null;
        $data['agent_name'] = $this->getAgent() ? $this->getAgent()->getName() : null;
        $data['attachments'] = $this->getAttachments();
        return $data;
    }

    /**
     * Prefill Currency
     */
    /**
     * @return mixed
     */
    public function setPrefillCurrency()
    {
        $settings = UserSetting::find([
            "conditions" => "user_profile_id = :id: AND user_setting_default_id IN ({user_setting_default_id:array})",
            "bind" => [
                "id" => ModuleModel::$user_profile->getId(),
                "user_setting_default_id" => UserSetting::PROPERTY_SETTINGS
            ]
        ]);

        if (count($settings) > 0) {
            foreach ($settings as $setting) {
                switch ($setting->getUserSettingDefaultId()) {
                    case UserSetting::TYPE_CURRENCY:
                        $currency = $setting->getValue();
                        if (empty($this->getMaintenanceFeesCurrency())) {
                            $this->setMaintenanceFeesCurrency($currency);
                        }
                        if (empty($this->getParkingFeesCurrency())) {
                            $this->setParkingFeesCurrency($currency);
                        }
                        if (empty($this->getFurnitureDepositCurrency())) {
                            $this->setFurnitureDepositCurrency($currency);
                        }
                        if (empty($this->getUtilityDepositCurrency())) {
                            $this->setUtilityDepositCurrency($currency);
                        }

                        if (empty($this->getDepositCurrency())) {
                            $this->setDepositCurrency($currency);
                        }
                        break;
                    default:
                        break;
                }
            }
        }

    }
}