<?php
/**
 * Created by PhpStorm.
 * User: binhnt
 * Date: 12/12/14
 * Time: 2:04 PM
 */

namespace Reloday\Gms\Models;

use Phalcon\Paginator\Adapter\QueryBuilder as PaginatorQueryBuilder;
use Reloday\Application\Lib\CacheHelper;
use Reloday\Application\Lib\ModelHelper;
use Reloday\Gms\Models\Contract as Contract;
use Reloday\Gms\Models\ModuleModel as ModuleModel;

class Office extends \Reloday\Application\Models\OfficeExt
{
    const LIMIT_PER_PAGE = 20;
    const MAX_LIMIT_PER_PAGE = 1000;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub;
        $this->belongsTo('company_id', 'Reloday\Gms\Models\Company', 'id', [
            'alias' => 'Company',
            'cache' => [
                'key' => 'COMPANY_' . $this->getCompanyId(),
                'lifetime' => CacheHelper::__TIME_24H,
            ]
        ]);

        $this->belongsTo('country_id', 'Reloday\Gms\Models\Country', 'id', [
            'alias' => 'Country',
            'cache' => [
                'key' => 'COMPANY_' . $this->getCountryId(),
                'lifetime' => CacheHelper::__TIME_24H,
            ]
        ]);
        $this->belongsTo('head_user_profile_id', 'Reloday\Gms\Models\UserProfile', 'id', [
            'alias' => 'UserProfile'
        ]);
        $this->belongsTo('zone_lang_id', 'Reloday\Gms\Models\ZoneLang', 'id', [
            'alias' => 'ZoneLang'
        ]);
    }

    /**
     * [check if active in the contract]
     * @return [type] [description]
     */
    public function inContractOfUser()
    {

        $current_gms_company = ModuleModel::$company;
        $hr_company = $this->getCompany();

        if ($hr_company) {
            $nb_contracts = Contract::count([
                'conditions' => 'from_company_id =:from_company_id: AND to_company_id=:to_company_id: AND status = :status:',
                'bind' => [
                    'to_company_id' => $current_gms_company->getId(),
                    'from_company_id' => $hr_company->getId(),
                    'status' => Contract::STATUS_ACTIVATED
                ]
            ]);

            if ($nb_contracts > 0) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    /**
     * Load list init
     * @param string $search_value [description]
     * @return [type]               [description]
     */
    public static function loadList($search_value = '')
    {
        $items = self::__findWithFilterSimple();
        $itemsArray = [];
        foreach ($items as $item) {
            $itemsArray[] = $item;
        }
        return [
            'success' => true,
            'data' => $itemsArray
        ];
    }

    /**
     * Load list init
     * @param string $search_value [description]
     * @return [type]               [description]
     */
    public static function getListByCompany($company_id)
    {
        $companies_arr = [];
        $countries_arr = [];
        $offices_arr = [];

        // 1. Load user profile
        $user_profile = ModuleModel::$user_profile;

        // Find company of user
        if ($user_profile instanceof UserProfile) {

            $company = Company::findFirst($user_profile->getCompanyId() ? $user_profile->getCompanyId() : 0);

            if (!$company instanceof Company) {
                return [
                    'success' => false,
                    'message' => 'COMPANY_INFO_NOT_FOUND',
                    'data' => []
                ];
            } else {
                // 2. Check type of company
                if (!$company->getCompanyTypeId() == Company::TYPE_GMS) {
                    return [
                        'success' => false,
                        'message' => 'COMPANY_TYPE_DIFFERENT'
                    ];
                } else {
                    $offices = Office::find([
                        'conditions' => 'status <> ' . self::STATUS_ARCHIVED .
                            ' AND company_id = ' . $company_id
                    ]);

                    if (count($offices)) {
                        $countries = Country::find();
                        if (count($countries)) {
                            foreach ($countries as $country) {
                                $countries_arr[$country->getId()] = $country->toArray();
                            }
                        }

                        foreach ($offices as $office) {
                            $offices_arr[$office->getId()] = array_merge([
                                'country_name' => isset($countries_arr[$office->getCountryId()]) ? $countries_arr[$office->getCountryId()]['name'] : ''
                            ],
                                $office->toArray()
                            );
                        }
                    }

                    return [
                        'success' => true,
                        'data' => ($offices_arr),
                    ];
                }
            }
        } else {
            return [
                'success' => false,
                'message' => 'USER_NOT_FOUND',
                'data' => []
            ];
        }
    }

    /**
     * check is belong to GMS
     * @return [type] [description]
     */
    public function belongsToGms()
    {
        if ($this->getCompany()) {
            if ($this->getCompany()->belongsToGms() == true) return true;
        }
        return false;
    }


    /**
     * @param string $name_search
     * @return array
     */
    public static function __findWithFilterSimple($options = [], $orders = [])
    {

        $queryBuilder = new \Phalcon\Mvc\Model\Query\Builder();
        $queryBuilder->addFrom('\Reloday\Gms\Models\Office', 'Office');
        $queryBuilder->columns([
            'uuid' => 'Office.uuid',
            'id' => 'Office.id',
            'Office.office_code',
            'Office.status',
            'Office.name',
            'invoicing_city_name' => 'City.name',
            'invoicing_address' => 'Office.invoicing_address',
            'invoicing_country_id' => 'Office.invoicing_country_id',
            'invoicing_email' => 'Office.invoicing_email',
            'invoicing_phone' => 'Office.invoicing_phone',
            'vat_number' => 'Office.vat_number',
            'address' => 'Office.address',
            'street' => 'Office.street',
            'town' => 'Office.town',
            'zipcode' => 'Office.zipcode',
            'state_county' => 'Office.state_county',
            'telephone' => 'Office.telephone',
            'company_id' => 'Office.company_id',
            'country_id' => 'Office.country_id',
            'company_name' => 'Company.name',
            'country_name' => 'Country.name',
            'country_iso2' => 'Country.cio',
        ]);
        $bind = array();
        $queryBuilder->distinct(true);
        $queryBuilder->innerjoin('\Reloday\Gms\Models\Company', 'Company.id = Office.company_id', 'Company');
        $queryBuilder->innerjoin('\Reloday\Gms\Models\Contract', 'Contract.from_company_id = Office.company_id', 'Contract');
        $queryBuilder->leftjoin('\Reloday\Gms\Models\Country', 'Country.id = Office.country_id', 'Country');
        $queryBuilder->leftjoin('\Reloday\Gms\Models\City', 'City.geonameid = Office.invoicing_city_geonameid', 'City');

        $queryBuilder->where("Contract.to_company_id = :gms_company_id:", [
            'gms_company_id' => ModuleModel::$company->getId()
        ]);
        $bind['gms_company_id'] = ModuleModel::$company->getId();

        $queryBuilder->andwhere("Contract.status = :contract_is_active:", [
            'contract_is_active' => Contract::STATUS_ACTIVATED
        ]);
        $bind['contract_is_active'] = Contract::STATUS_ACTIVATED;

        if (isset($options['query']) && is_string($options['query']) && $options['query'] != '') {
            $queryBuilder->andwhere("Office.name LIKE :query: OR Office.office_code LIKE :query:", [
                'query' => '%' . $options['query'] . '%',
            ]);
        }

        if (isset($options['is_active']) && is_bool($options['is_active']) && $options['is_active'] == true) {
            $queryBuilder->andwhere("Office.status = :office_is_active:", [
                'office_is_active' => self::STATUS_ACTIVATED
            ]);
            $bind['office_is_active'] = self::STATUS_ACTIVATED;
        }

        if (isset($options['company_id']) && is_numeric($options['company_id']) && $options['company_id'] > 0) {
            $queryBuilder->andwhere("Office.company_id = :company_id:", [
                'company_id' => $options['company_id']
            ]);
            $bind['company_id'] = $options['company_id'];
        }

        $limit = isset($options['limit']) && is_numeric($options['limit']) && $options['limit'] > 0 ? $options['limit'] : self::MAX_LIMIT_PER_PAGE;
        if (!isset($options['page'])) {
            $start = isset($options['start']) && is_numeric($options['start']) && $options['start'] > 0 ? $options['start'] : 0;
            $page = intval($start / $limit) + 1;
        } else {
            $page = isset($options['page']) && is_numeric($options['page']) && $options['page'] > 0 ? $options['page'] : 1;
        }

        /** process order */
        if (count($orders)) {
            $order = reset($orders);
            if ($order['field'] == "name") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Office.name ASC']);
                } else {
                    $queryBuilder->orderBy(['Office.name DESC']);
                }
            }

            if ($order['field'] == "country_name") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Country.name ASC']);
                } else {
                    $queryBuilder->orderBy(['Country.name DESC']);
                }
            }

            if ($order['field'] == "company_name") {
                if ($order['order'] == "asc") {
                    $queryBuilder->orderBy(['Company.name ASC']);
                } else {
                    $queryBuilder->orderBy(['Company.name DESC']);
                }
            }

        }

        try {
            $paginator = new PaginatorQueryBuilder([
                "builder" => $queryBuilder,
                "limit" => $limit,
                "page" => $page,
            ]);
            $pagination = $paginator->getPaginate();

            $items = [];

            if ($pagination->items->count() > 0) {
                foreach ($pagination->items as $item) {
                    $item = (array)$item;
                    $item['id'] = intval($item['id']);
                    $item['company_id'] = intval($item['company_id']);
                    $item['status'] = intval($item['status']);

                    $country = Country::findFirstById($item['country_id']);
                    if($country){
                        $item['country_name'] = $country->getName();
                    }

                    $items[] = $item;
                }
            }

            return [
                'success' => true,
                'page' => $page,
                'data' => $items,
                'before' => $pagination->before,
                'next' => $pagination->next,
                'last' => $pagination->last,
                'current' => $pagination->current,
                'total_items' => $pagination->total_items,
                'total_pages' => $pagination->total_pages,
                'total_rest_items' => $pagination->total_items - $limit * $pagination->current,

            ];

        } catch (\Phalcon\Exception $e) {
            \Sentry\captureException($e);
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        } catch (\PDOException $e) {
            \Sentry\captureException($e);
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        } catch (Exception $e) {
            \Sentry\captureException($e);
            return ['success' => false, 'detail' => [$e->getTraceAsString(), $e->getMessage()]];
        }
    }
}
